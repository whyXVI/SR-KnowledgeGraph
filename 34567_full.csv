front,back
排序在数据结构中的定义是什么？,按照每个记录的关键码将记录重新排列，使其从小到大或从大到小有序
什么是排序算法的稳定性？,如果具有相同关键码的记录在排序前后的相对位置不变，则该排序算法是稳定的
评价一个排序算法的主要标准是什么？,时间复杂度、空间复杂度和算法本身的复杂度
内部排序和外部排序的区别是什么？,内部排序是在内存中完成的排序，外部排序是需要外部存储器参与的排序
比较排序和非比较排序的主要区别是什么？,比较排序通过比较关键码进行排序，非比较排序通过其他方式进行排序，如计数或分配
起泡排序的基本过程是什么？,依次比较相邻元素，若反序则交换，重复n-1趟，直至所有元素有序
如何改进起泡排序的效率？,记录最后一次交换的位置，减少无序区范围，避免多余比较
起泡排序的时间复杂度和空间复杂度分别是多少？,时间复杂度为O(n^2)，空间复杂度为O(1)
起泡排序的最好情况时间复杂度是多少？,O(n)
直接插入排序的基本思想是什么？,每趟将一个待排序的记录插入到一个已经排序的有序序列中，直到全部记录排序好
在直接插入排序中，有序区和无序区间的关系？,有序区包含已排序的元素，无序区包含待排序的元素，每趟排序从无序区选择一个元素插入有序区
直接插入排序的最好、最坏和平均时间复杂度分别是多少？,最好O(n)，最坏O(n^2)，平均O(n^2)
直接插入排序是稳定的排序算法吗？为什么？,是，因为相同元素在插入过程中不会改变相对位置
在简单选择排序中，如何在无序区选择最小的记录？,假设无序区的第一个元素为最小值，依次与后续元素比较，更新最小值位置
简单选择排序的时间复杂度是多少？,O(n^2)
希尔排序与插入排序的关系？,希尔排序（Shell Sort）是一种基于插入排序的改进算法，通过分组和逐渐减小增量来提高排序效率
希尔排序是稳定的排序算法吗？为什么？,不是，因为相同元素在分组和插入排序过程中可能会交换位置
希尔排序中如何选择增量序列？,增量序列通常取n/2，n/4，…，直到增量为1，
在希尔排序中，增量序列的作用是什么？,增量序列决定了排序的分组方式和最终的排序效率
希尔排序的时间复杂度范围是什么？,O(n^2) 和 O(n log^2 n) 之间
快速排序相较于起泡排序的主要改进点是什么？,记录的比较和移动从两端向中间进行，减少了移动次数
快速排序的基本思想是什么？,选择一个基准，将序列分为小于基准和大于基准的两部分，递归排序
快速排序中通常如何选择基准？,通常选择序列的第一个记录作为基准
快速排序如何进行分区以确保基准两侧有序？,通过左右扫描，将小于基准的移到左侧，大于基准的移到右侧
快速排序的递归何时结束？,当分区只剩一个记录时，递归结束
快速排序的递归实现步骤是什么？,选择基准元素，分区，将基准放到正确位置，对左右子序列递归调用快速排序
快速排序的递归调用条件是什么？,当左索引小于右索引时，递归调用快速排序函数
快速排序的最佳情况是什么？,每次分区后左右子序列长度相等，时间复杂度为O(n log n)
快速排序的最差情况是什么？,每次分区只得到一个子序列，时间复杂度为O(n^2)
快速排序的平均时间复杂度是多少？,O(n log n)
快速排序的栈深度是多少？,O(log n)
堆排序如何改进了简单选择排序？,使用堆结构每次选择最小（或最大）元素，提高选择效率
小根堆和大根堆在完全二叉树中的性质区别是什么？,小根堆：每个结点值≤左右孩子结点值；大根堆：每个结点值≥左右孩子结点值
堆的根结点有什么特点？,小根堆根结点是最小值，大根堆根结点是最大值
堆在顺序存储结构中，结点r[i]是什么的父结点？,r[i]是r[2i]和r[2i+1]的父结点
堆排序的基本步骤有哪些？,构建堆，输出堆顶元素，将最后一个元素移至堆顶并调整堆，重复直到排序完成
输出堆顶元素后如何调整堆？,将堆顶元素与最后一个元素交换，调整剩余部分使其成为堆
小根堆如何筛选顶元素？,将顶元素与最后一个元素交换，调整剩余部分以恢复堆性质
堆排序如何进行建堆？,从最后一个非叶子节点开始向上调整，每个节点向下筛选以构建堆
堆排序的时间复杂度是多少？,O(n log n)
在二路归并排序中，如何将两个有序子序列合并？,比较两个子序列的第一个元素，较小的放入新序列，依次进行直到所有元素合并完毕
二路归并排序中如何处理剩余未处理的元素？,当一个子序列处理完后，直接将另一个子序列的剩余元素加入新序列
归并排序如何分割序列进行排序？,将序列递归地分成两个子序列，分别排序后再归并成一个有序序列
归并排序中的分治法包括哪三个步骤？,分解问题、解决问题、合并问题的解
非递归归并排序如何处理长度为h的序列？,长度为h的序列两两归并，把结果保存在r1数组中
归并排序的时间复杂度是多少？,O(n log n)
归并排序的空间复杂度是多少？,O(n)
归并排序是稳定的排序方法吗？为什么？,是，因为相同元素的相对位置在排序过程中不改变
归并排序与快速排序在性能上的主要区别是什么？,归并排序在最坏情况下时间复杂度为O(n log n)，而快速排序在最坏情况下时间复杂度为O(n^2)
归并排序适用于哪些应用场景？,适用于数据量大且需要稳定排序的场景，如外部排序
计数排序如何确定元素的位置？,通过统计比每个元素小的元素个数来确定其在排序后的序列中的位置
在计数排序中如何处理重复元素？,每次处理重复元素时，对应的计数减1，放置到正确位置
计数排序的时间复杂度由哪些部分组成？,统计元素个数O(n)，计算<=元素的个数O(k)，排序O(n)，总计O(n + k)
为什么桶排序可能不适合处理数据分布不均匀的情况？,数据分布不均匀会导致桶，有些桶可能会包含大量数据，而其他桶几乎为空，桶内数据的排序时间复杂度会显著增加。
桶排序在分配元素时如何保证稳定性？,元素按其关键字分配到对应的桶中，桶内使用稳定的排序算法保持元素相对顺序
桶排序的时间复杂度由哪些部分组成？,清空桶O(m)，分配元素O(n)，收集桶O(m)，总计O(m + n)
在桶排序中，如何处理桶内元素？,每个桶用一个链表存储元素，新元素按值大小插入到链表的正确位置
桶排序中如何收集非空桶中的元素？,将非空桶中的元素按顺序首尾相连，形成一个有序链表
基数排序如何处理多位数的排序？,按各个位的值进行排序，低位到高位逐位排序，相当于多次桶排序
基数排序适用于哪些类型的序列？,适用于整数或字符串等定长数据的排序
如何利用快速排序求第k小值？,修改快速排序，找到第k小值的位置，通过分区过程确定k的位置
如何对带头结点的单链表进行直接插入排序？,从头结点开始遍历，比较并插入新节点到已排序部分的适当位置
基数排序中处理多位数排序时的顺序是什么？,从最低位到最高位逐位进行排序
基数排序如何保证排序稳定性？,每一位的排序都使用稳定的排序算法，如计数排序
带头结点的单链表进行直接插入排序的关键步骤是什么？,从头结点开始，依次将未排序部分的元素插入到已排序部分的适当位置
如何对带头结点的单链表进行简单选择排序？,依次遍历链表，将当前位置的元素与后续元素进行比较并交换，找到最小值
在链表选择排序中如何交换结点的值？,使用临时变量交换两个结点的数据域
如果有1万条数据，为什么选择线性查找？,因为数据量较小，线性查找的时间复杂度为O(n)，可以接受
查找算法的性能为什么通过ASL评价？,因为ASL反映了查找过程中比较次数的多少，比较次数越少则性能越好
为什么静态查找和动态查找有不同的操作？,静态查找不涉及插入和删除操作，而动态查找需要处理插入和删除操作
树表查找和散列表查找是否适用于动态查找？为什么？,是，树表查找和散列表查找可以高效处理插入和删除操作
为什么顺序查找适合处理乱序数据？,顺序查找逐个比较元素，无需数据预排序，适合乱序数据查找
为什么要计算查找成功的平均查找长度？,计算ASL可以评估查找效率，查找成功的平均查找长度反映了查找操作的平均复杂度
查找过程中如何减少比较次数？,在每个记录中附设一个频度域，频繁查找的记录依次后移，以减小比较次数
为什么顺序查找不适用于表长较大的查找表？,因为平均查找长度较大，查找效率低
折半查找需要满足什么条件才能进行？,数据必须是有序的，且存放在数组中
折半查找是如何缩小查找范围的？,每次比较后将查找区间缩小为一半，更新low和high指针
折半查找成功的平均查找长度ASL如何计算？,表长为n时，ASL成功约为log2(n)-1
折半查找不成功的平均查找长度ASL如何计算？,表长为n时，ASL不成功约为log2(n)+1
在什么情况下使用分块查找？,针对部分有序的数据，性能介于顺序查找和折半查找之间
如何高效查询电话号码？,针对不同的数据结构，选择顺序查找或其他适合的查找算法
为什么分块查找比顺序查找效率高？,分块查找通过建立索引表缩小查找范围，从而减少比较次数，提高效率
在电话号码查询中，如何利用分块查找提高查询效率？,通过建立索引表，将电话号码分块管理，每块内用顺序查找或折半查找
分块查找的平均查找长度ASL如何计算？,将n个记录分成b块，每块有s条记录，ASL = (s+1)/2 + (n+1)/2b
为什么树表查找适合动态查找？,因为树表查找支持高效的插入和删除操作，适用于频繁更新的数据集
树表查找适用于有序数据还是无序数据？为什么？,适用于无序数据，因为可以通过建立树结构进行高效查找
什么是二叉排序树？,一种二叉树，左子树节点值小于根节点值，右子树节点值大于根节点值，左右子树也分别是二叉排序树
如何在二叉排序树中查找一个关键字？,从根节点开始，比较关键字，若小于当前节点值则查找左子树，若大于则查找右子树，直到找到关键字或查找结束
如何构造二叉排序树（BST）？,从空树开始，依次插入元素，每次将新元素与当前节点比较，小于当前节点放左子树，大于放右子树
在BST中插入新节点的步骤是什么？,如果当前节点为空，直接插入；否则与当前节点比较，小于当前节点插入左子树，大于当前节点插入右子树，重复直到插入位置为空
在BST中查找关键字的步骤是什么？,从根节点开始，依次比较关键字，小于当前节点则查找左子树，大于当前节点则查找右子树，直到找到或为空
BST删除节点后如何保持树的特性？,删除节点后分三种情况：叶子节点、只有一棵子树、两棵子树，分别处理以保持BST特性
如何删除BST中的叶子节点？,直接删除
如何删除只有左子树或右子树的二叉排序树节点？,将该节点的父节点指向其唯一的子节点，然后删除该节点
如何删除有两个子树的二叉排序树节点？,找到该节点的前驱节点或后继节点，用前驱或后继节点替代该节点，然后删除前驱或后继节点
为什么不同形态的二叉排序树的ASL值不同？,因为不同形态的树的深度和结构不同，导致查找路径长度不同
二叉排序树在最坏情况下会退化成什么？ASL是多少?,退化成单支顺序查找，ASL = (n+1)/2
二叉排序树在最优化情况下的ASL是多少？,ASL = log2(n+1) - 1
AVL树的特性有哪些？,左右子树都是平衡二叉树，且左右子树高度之差的绝对值不超过1
AVL树中，当出现RR失衡时如何调整？,左旋转调整，使得右子树的高度减少，恢复平衡
AVL树中，当出现RL失衡时如何调整？,先右旋再左旋，使得树恢复平衡
为什么B-树适合作为磁盘索引？,B-树是一种多叉平衡排序树，可以一次读取更多信息，减少树的层数，提高查找效率
为什么数据库索引适合使用B-树？,因为B-树能在数据量很大时保持O(log n)的查找效率
什么是Hash技术？,Hash技术通过散列函数H，将记录的关键码映射到一个存储位置，使得关键码和存储位置之间建立确定的对应关系
设计散列函数时的主要目标是什么？,保证散列地址均匀分布，减少冲突，确保查找效率
Hash查找中常见的数据冲突处理方法有哪些？,开放地址法和链地址法
Hash查找过程的主要步骤有哪些？,计算关键码的散列地址H(key)，在散列表中查找该地址存储的记录
Hash技术中，为什么会发生冲突？,不同关键码可能映射到相同的存储位置，导致冲突
使用直接定址法构造哈希函数时，h(key)如何计算？,h(key) = a * key + b，其中a和b为常数
为什么除留余数法应用广泛？,计算简单，适用范围广，通常选择素数或不包含小质因数的合数作为模数p
为什么数字分析法适用于已知关键码分布的情况？,可以分析关键码的每位数字，选择分布均匀的数字或组合作为地址
平方取中法适用于什么情况？,关键码分布未知且关键码位数不大时，通过平方取中间几位作为存储地址
折叠法如何处理关键码位数较多的情况？,将关键码分割成若干部份，采用移位叠加或间界叠加处理，最后一位对齐相加
开放定址法如何处理冲突？,为产生冲突的地址H(key)按照某种规则产生另一个地址，如线性探测法、平方探测法、随机探测法
链地址法如何处理Hash冲突？,将所有Hash地址相同的记录存储在一个单链表中，Hash表存储指向链表头的指针
公共溢出法如何处理Hash冲突？,散列表包含基本表和溢出表，冲突记录存储在溢出表中，通过顺序查找处理
"直接定址法的特点,适用情况是什么？",计算简单，无冲突，但适用于关键码分布连续的情况，否则空间浪费大
Hash查找的性能由哪些因素决定？,由处理冲突的方法和冲突概率决定，冲突越少，查找效率越高
Hash查找的性能由哪些因素决定？,Hash函数的均匀性、冲突处理方法和装填因子a
什么是Hash查找的装填因子？为什么重要？,装填因子a=填入表中的记录个数/Hash表的长度，a越大冲突可能性越大
如何用Hash表求集合A和B的关系，找出B中但不在A中的元素个数？,对集合A构造Hash表，查找B中的元素在Hash表中是否存在.
常见查找算法如线性查找、树表查找和散列查找的时间复杂度分别是多少？,线性查找O(n)，树表查找O(log n)，散列查找O(1)
递归的两个要素是什么？,边界条件和递归模式。
非递归函数的控制条件是什么？,入栈/出栈的条件，入栈做什么，出栈做什么。
"迷宫求解的时间复杂度是什么,为什么？",一条通路可以通过遍历迷宫找到，时间复杂度O(n^2);哪里都有三种可能的移动，搜索需要递归探索， O(n^3)
分治法的基本步骤是什么？,1) 将问题划分为互不相交的子问题；2) 递归求解子问题，组合得到原问题的解。
动态规划的基本步骤是什么？,1) 适用于子问题重叠的情况；2) 每个子问题只求解一次，提高效率。
01背包问题的基本描述是什么？,给定一组物品，每个物品有重量和价值，求解在不超过背包容量的前提下的最大价值。
求解01背包问题的核心是什么？,最大化选择当前物品或不选取的背包价值
迷宫求解中用到哪些算法基本思想？,递归：沿着一个方向走，若不通则换方向。回溯：所有方向都不通则回到上一步换方向。
迷宫求解递归算法的步骤是什么？,如果当前位置是出口，递归结束；否则假设当前位置为路径，按南、东、西、北顺序递归走，不通则回溯。
迷宫问题的非递归求解与栈的类比关系？,递归等于进栈，回溯等于出栈。
分治法的基本思想是什么？,将一个规模为n的难题分解为k个规模较小的子问题，递归地解这些子问题，然后合并子问题的解得到原问题的解。
分治法的经典案例有哪些？,Fibonacci数列，阶乘，汉诺塔，二分法搜索，归并排序等。
汉诺塔问题的归纳法思想是什么？,1）将n个盘子从A移到C，需先将n-1个盘子从A移到B，再将n-1个盘子从B移到C。
回溯法的基本思想是什么？,将问题的解空间转化为图或树的搜索形式，使用搜索策略遍历，记录和寻找所有可行解或最优解。
回溯法的经典案例有哪些？,迷宫求解，深度优先遍历，八皇后问题等。
什么是优先级队列？,优先级队列是有多个队列，每个队列优先级不同的数据结构。
函数调用和返回在栈中的操作是什么？,函数调用==进栈，函数返回==出栈。
前序遍历的基本步骤是什么？,先访问根结点，然后遍历左子树，最后遍历右子树
前序遍历的函数调用在数据结构中如何实现？,使用递归函数调用，每次调用将当前结点入栈，返回时出栈
如何根据层序和中序序列还原二叉树结构？,使用层序确定结点位置，中序确定左右子树范围，递归构建
什么是双亲孩子表示法？,用一个数组存储结点，每个结点存储其数据、父结点位置和孩子结点
什么是链式结构的多重链表表示法？,用多重链表存储结点，每个结点存储其数据和指向孩子结点的指针
什么是孩子兄弟表示法？,每个结点存储数据、指向第一个孩子的指针和指向右兄弟的指针
二叉树转换成森林的转换过程是什么？,主要包括删除右孩子连线和将分离后的二叉树转换为树的步骤
树的四种存储结构有哪些？,双亲表示法，孩子表示法，双亲孩子表示法，孩子兄弟表示法
什么是双亲表示法？,用一个数组存储结点，每个结点存储其数据和父结点位置
什么是孩子表示法？,每个结点存储数据和指向孩子结点的指针，孩子结点用链表表示
带右兄弟的双亲表示法是什么？,在双亲表示法基础上增加一个指向右兄弟的指针
什么是三叉链表？,每个结点存储数据、指向左右孩子的指针和指向父结点的指针
二叉树最常用的结构是什么？,二叉链表
哈夫曼编码如何表示不同字符的编码？,通过频率构建哈夫曼树，频率高的字符用较短编码，频率低的字符用较长编码
字符编码和bit编码的区别是什么？,字符编码使用字符存储编码，bit编码使用二进制位存储编码，bit编码更节省空间
如何根据前序和中序序列构建二叉树？,前序序列的第一个元素为根结点，在中序序列中找到根结点位置，分割前序和中序序列，递归构建左右子树
什么是普里姆算法？,一种用于求解加权连通图的最小生成树的贪心算法
普里姆算法在使用邻接矩阵与使用邻接表时的时间复杂度区别？,使用邻接矩阵时为O(n^2)，使用邻接表时为O(E log V)
普里姆算法适用于哪些场景？,网络设计、优化问题，如电话网络、电网设计等
普里姆算法使用的主要数据结构有哪些？,邻接矩阵和辅助数组，如`adjvex`和`lowcost`
邻接矩阵在普里姆算法中的作用是什么？,存储图中各顶点之间的边的权重，便于快速查找最小权值边
普里姆算法的主要用途是什么？,用于求解加权连通图的最小生成树
普里姆算法的关键步骤有哪些？,选择起点，初始化辅助数组，循环选择最小权值边，更新辅助数组，直至所有顶点被访问
什么是图的数学表示方法？,"用顶点集合V和边集合E表示图，记为G = (V, E)"
图可以通过哪两种方式表示？,数学方法和图形方法
图中的顶点和边分别代表什么？,顶点代表数据元素，边代表顶点之间的关系
有向图和无向图的区别是什么？,有向图的边有方向，无向图的边无方向
图可以用来解决哪些实际问题？,通信网络、交通网络、社交网络等问题
什么是简单图？,不存在顶点到其自身的边，且同一条边不重复
在有向和无向图中，什么是邻接点？,"如果(vi, vj)是一条边，vi和vj互为邻接点；如果<vi， vj>是一条弧，vj是vi的邻接点"
什么是完全无向图和完全有向图？,有n(n-1)/2条边的是完全无向图，有n(n-1)条弧的是完全有向图
什么是图的度？包括哪些类型？,度是与顶点相关联的边的条数，有入度和出度两种类型
什么是稀疏图和稠密图？,边或弧很少的图称为稀疏图，边或弧较多的图称为稠密图
什么是路径和路径长度？,路径是接续的边的端点构成的顶点序列，路径长度是路径上边或弧的数目或权值之和
什么是简单路径和简单回路？,简单路径是顶点不重复出现的路径，简单回路是除了起点和终点外，其余顶点均不相同的回路
什么是连通图和连通分量？,连通图是无向图中任何一对顶点都有路径相连，连通分量是无向图中的极大连通子图
什么是强连通图和强连通分量？,强连通图是有向图中任何一对顶点都有弧相连，强连通分量是有向图中的极大连通子图
什么是生成树？,连通图中一个极小连通子图，包含所有顶点，但只有足以构成树的n-1条边
什么是生成森林？,在非连通图中，每个连通分量的生成树构成生成森林
连通图和强连通图有什么区别？,连通图是无向图中任何一对顶点都有路径相连，强连通图是有向图中任何一对顶点都有有向路径相连
什么是图的邻接矩阵？,使用一个二维数组表示图中的顶点和边，矩阵中的元素表示顶点之间是否有边
如何表示无向图的邻接矩阵？,用一个对称的二维数组，元素为1表示顶点之间有边，0表示无边
如何表示有向图的邻接矩阵？,用一个二维数组，元素为1表示有弧，0表示无弧，方向由行到列
如何表示带权图的邻接矩阵？,用一个二维数组，元素为边的权重，无边则用∞表示
什么是图的邻接表？,邻接表是顺序结构和链式存储的组合，用于表示图的存储结构
邻接表由哪些部分组成？,顶点结点和弧结点，顶点结点包含顶点数据和第一条弧的指针，弧结点包含邻接顶点和下一条弧的指针
如何用邻接表表示无向图？,每条边表示为两个方向的弧，分别存储在对应的顶点结点的弧链表中
邻接表中顶点和弧的结构在C++中如何描述？,顶点用`struct VertexNode`表示，包含顶点数据和第一条弧的指针；弧用`struct ArcNode`表示，包含邻接顶点和下一条弧的指针
什么是十字链表？,一种用于表示有向图的存储结构，顶点结点包含指向第一条入弧和出弧的指针，弧结点包含指向下一个入弧和出弧的指针
什么是邻接多重表？,一种用于表示无向图的存储结构，每条边用两个弧结点表示，分别存储在两个顶点结点的弧链表中
什么是边集数组？,一种图的存储结构，用一个数组表示所有边，每个元素包含起点、终点和权值
构造图的存储结构的关键步骤有哪些？,读取数据、创建顶点和边、使用邻接矩阵或邻接表表示图
图的常用遍历方法有哪些？,深度优先遍历（DFS）和广度优先遍历（BFS）
邻接矩阵的C++描述中包含哪些主要成员？,包括顶点数组`T vertex[N]`、边数组`int arc[N][N]`、顶点数`int vNum`和边数`int arcNum`
深度优先遍历的基本思想是什么？,从某顶点出发，沿着一条路径走到底，再回溯到上一个顶点，寻找新的未访问顶点，直到所有顶点都被访问
广度优先遍历的基本思想是什么？,从某顶点出发，先访问所有相邻顶点，再逐层向外扩展，直到所有顶点都被访问
如何通过文件数据创建邻接矩阵？,读取文件中的顶点和边信息，初始化邻接矩阵，设置对应位置为1表示有边，0表示无边
如何实现非连通图的深度优先遍历？,对每个顶点调用DFS函数，未被访问的顶点作为起点进行深度优先遍历
如何实现非递归的深度优先遍历？,使用栈代替递归函数，手动管理栈来实现深度优先遍历
如何判断一张图是否是连通图？,通过一次深度优先遍历或广度优先遍历，检查是否所有顶点都被访问到
广度优先遍历的基本思想是什么？,从某顶点出发，依次访问所有相邻顶点，再逐层向外扩展，直到所有顶点都被访问
实现广度优先遍历的步骤有哪些？,初始化队列Q，访问顶点v并入队，重复出队访问所有未访问的邻接点并入队，直到队列为空
邻接表在C++中用类如何描述？,使用`class ALGraph`，包含顶点结点数组`VertexNode adjlist[MAXSIZE]`、顶点数`vNum`和边数`arcNum`
图的遍历中，邻接矩阵和邻接表的DFS算法有何区别？,邻接矩阵使用二维数组存储边信息，邻接表使用链表存储边信息，DFS实现方式不同
深度优先遍历的基本思想是什么？,从某顶点出发，访问第一个未访问的邻接点，递归访问所有未访问的邻接点，直到所有顶点都被访问
邻接表和邻接矩阵的DFS算法如何寻找未访问的邻接点？,邻接表遍历链表找到第一个未访问的邻接点，邻接矩阵遍历数组找到第一个未访问的邻接点
广度优先遍历的基本思想是什么？,从某顶点出发，依次访问所有未访问的邻接点，再从这些邻接点出发继续访问，直到所有顶点都被访问
广度优先遍历的实现步骤有哪些？,初始化队列，访问起始顶点并入队，重复出队访问所有未访问的邻接点并入队，直到队列为空
邻接表和邻接矩阵的BFS算法如何寻找未访问的邻接点？,邻接表遍历链表找到第一个未访问的邻接点，邻接矩阵遍历数组找到第一个未访问的邻接点
邻接矩阵和邻接表在空间和时间性能上有何区别？,邻接矩阵占用O(n^2)空间，遍历时间为O(n^2)；邻接表占用O(n+e)空间，遍历时间为O(n+e)
什么是克鲁斯卡尔算法？,一种用于求解最小生成树的贪心算法，按权值从小到大选择边，避免形成环
克鲁斯卡尔算法的主要步骤是什么？,对所有边按权值排序，从小到大选择边，确保不会形成环，直到包含所有顶点
克鲁斯卡尔算法如何判断是否形成环？,使用并查集数据结构，判断两个顶点是否在同一集合中，若是则形成环
克鲁斯卡尔算法使用的主要数据结构是什么？,边集数组，按权值从小到大排序，包含起始顶点、终止顶点和边的权值
边集数组在图算法中的作用是什么？,存储图中的所有边，便于按权值排序和选择最小权值边
克鲁斯卡尔算法如何对边进行排序？,使用冒泡排序对边集数组按权值从小到大排序
克鲁斯卡尔算法的主要实现步骤是什么？,初始化顶点集合，排序边集数组，依次选择边，确保不形成环，直到生成树完成
克鲁斯卡尔算法中如何合并顶点集合？,使用并查集结构，合并属于不同集合的顶点，更新集合编号
最短路径问题的主要应用有哪些？,交通规划、物流运输、网络路由等领域
什么是Dijkstra算法？,一种用于求解有向带权图中单源最短路径的贪心算法
Dijkstra算法的主要步骤是什么？,初始化距离数组和已访问顶点集合，迭代选择未访问顶点中的最短路径顶点，更新相邻顶点的最短路径，直到所有顶点被访问
Dijkstra算法的基本思想是什么？,按路径长度递增次序，逐步确定每个顶点的最短路径
Dijkstra算法的主要步骤有哪些？,初始化，选择未访问顶点中距离最短者，更新邻接顶点距离，重复直到所有顶点被访问
Dijkstra算法使用哪些主要数据结构？,邻接矩阵、辅助数组S、距离数组Disk、路径数组Path
Dijkstra算法中的辅助数组S有什么作用？,记录顶点是否已找到最短路径
Dijkstra算法中的路径数组Path的作用是什么？,记录源点到各顶点的最短路径上的前一个顶点
如何使用图结构来解决田径赛时间安排问题？,使用图结构表示比赛项目，边表示不能同时进行的项目，通过图的着色问题来安排时间
如何用邻接矩阵存储图？,用二维数组表示图中的顶点和边，矩阵元素表示顶点之间是否有边
什么是图的着色问题？,将图中的顶点分配颜色，使得相邻顶点颜色不同，用最少的颜色完成着色
如何实现图的着色算法？,使用贪心算法，每次选择未着色顶点，分配可用的最小颜色，直到所有顶点都被着色
什么时候选择用邻接矩阵存储图？,当图比较稠密，即边数接近顶点数的平方时，使用邻接矩阵更合适
哈夫曼编码的关键特点是什么？,解码时的唯一性，每个编码都不是其他编码的前缀
如何构建一棵哈夫曼树？,从下向上构造，选择权值最小的两个结点组成子树，重复直到只剩一个根结点
什么是哈夫曼树？,叶子结点带有权值的最优二叉树，带权路径长度最短
哈夫曼编码与哈夫曼树有什么关系？,哈夫曼树是一种用于生成哈夫曼编码的方法，通过构建哈夫曼树可以获得最优前缀编码
构建哈夫曼树的具体步骤是什么？,"选择权值最小的两个结点组成新子树，新树的根结点权值为两棵树的根结点权值之和,将新树的权值加入权值表，重复直到权值表为空"
哈夫曼编码的主要应用是什么？,数据压缩，通过给频率高的字符分配较短的编码，实现压缩效果
在K叉树的第i层上最多有多少个结点？,K^i
深度为 k 的二叉树至多有多少个结点？,2^k - 1
任何一棵二叉树T，如果其叶结点数为 n_0，则度为2的结点数为多少个？,n_0 - 1
具有 n 个结点的完全二叉树的深度为多少？,floor(log2 n) + 1
什么是森林？,互不相交的树的集合
非线性结构最重要的操作是什么？,遍历
什么是遍历？,按照某种次序依次访问所有结点，使每个结点仅被访问一次。
树的前序遍历的步骤是什么？,访问根结点，从左到右遍历每一棵子树
树的后序遍历的步骤是什么？,从左到右遍历每一棵子树，访问根结点
树的层序遍历（广度遍历）的步骤是什么？,从上到下逐层遍历，同层按从左到右顺序遍历
基于二叉链表的二叉树的创建步骤是什么？,建立根结点、建立左子树、建立右子树
使用顺序存储结构建立二叉树的基本思想是什么？,按照顺序存储结构中的元素顺序逐个建立树的结点，确保根结点、左子树和右子树的正确连接。
树转换成二叉树的转换原则是什么？,第一个右兄弟结点→右孩子，第一个孩子结点→左孩子
森林转换成二叉树的转换原则是什么？,每棵树转换成二叉树，从第二棵树开始，后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子
二叉树转换成森林的转换原则是什么？,根结点的右孩子→第二棵树的根结点，根结点的左孩子→第一个孩子，右孩子→右兄弟
在树和二叉树之间的遍历中，有哪些等价性？,对于树的前序遍历与二叉树的前序遍历等价，而树的后序遍历与二叉树的中序遍历等价。
已知二叉树的前序序列 { ABCDEFGH } 和中序序列 { CDBA FEHG }，能否唯一确定一棵二叉树？,是的
什么样的二叉树前序序列和中序序列相同？,只有一个结点的树
什么样的二叉树后序序列和中序序列相同？,只有一个结点的树
什么样的二叉树前序序列和后序序列相同？,只有一个结点的树
森林有哪两种遍历方式？,前序遍历和后序遍历
森林的前序遍历的步骤是什么？,前序遍历森林中的每一棵树
森林的后序遍历的步骤是什么？,后序遍历森林中的每一棵树
树和二叉树的转换方法是什么？,孩子兄弟表示法
什么是孩子兄弟表示法？,在兄弟之间加线，保留长子连线，去掉其他孩子连线
二叉树前序遍历的步骤是什么？,访问根结点，前序遍历左子树，前序遍历右子树
二叉树中序遍历的步骤是什么？,中序遍历左子树，访问根结点，中序遍历右子树
二叉树后序遍历的步骤是什么？,后序遍历左子树，后序遍历右子树，访问根结点
二叉树层序遍历的步骤是什么？,从上到下逐层遍历，同层按从左到右顺序遍历
如何在中序序列中查找一个元素的位置？,遍历中序序列，找到元素所在的位置并返回
实现哈夫曼编码的主要步骤有哪些？,统计频度、存储和建立哈夫曼树、存储和建立哈夫曼编码表、哈夫曼编码、哈夫曼解码
哈夫曼树的结点结构如何存储？,使用数组`huffTree[2*n-1]`，每个结点包含权重、左孩子、右孩子和父结点指针
哈夫曼编码表如何存储？,每个字符及其对应的编码存储在表中，字符作为索引，编码作为值
哈夫曼编码的具体过程是什么？,根据字符频率构建哈夫曼树，从根到叶子路径生成编码，频率高的字符使用较短编码
哈夫曼解码的具体过程是什么？,从左到右读取编码串，从根结点开始，根据0选择左支，1选择右支，直到叶结点，重复直到解码完成
如何使用栈实现二叉树的前序遍历？,利用栈保存当前结点，访问左子树，当左子树为空时出栈并访问右子树
中序遍历的基本步骤是什么？,先遍历左子树，然后访问根结点，最后遍历右子树
如何使用栈实现二叉树的中序遍历？,利用栈保存当前结点，先遍历左子树，当左子树为空时出栈并访问右子树
在前序遍历过程中如何处理栈中的结点？,函数调用相当于入栈，函数返回相当于出栈，先处理左子树，左子树处理完后再处理右子树
如何统计二叉树中的叶子结点总数？,递归判断每个结点是否为叶子结点，若是则计数
如何计算二叉树的深度？,递归计算每个结点的左右子树深度，取较大值加1
二叉树的三种存储结构是什么？,顺序存储结构、二叉链表、三叉链表
二叉树的顺序存储结构是什么？,将二叉树按照完全二叉树编号，用一维数组存储，空位用NULL表示
二叉链表的结点结构是什么？,每个结点存储数据和指向左右孩子的指针
什么是二叉树的前序遍历？,先访问根结点，然后遍历左子树，最后遍历右子树
什么是二叉树的中序遍历？,先遍历左子树，然后访问根结点，最后遍历右子树
什么是二叉树的后序遍历？,先遍历左子树，然后遍历右子树，最后访问根结点
如何进行二叉树的层次遍历？,使用队列从上到下、从左到右依次访问每一个结点，将左右孩子依次入队
如何释放二叉树的内存？,递归释放每个结点的左子树和右子树，最后删除根结点
如何计算二叉树的结点总数？,结点总数等于左子树结点数加右子树结点数再加1
什么是完全二叉树？,按从上到下、从左到右的顺序为结点编号，与满二叉树序号一一对应的二叉树。
二叉树第i层上最多有多少个结点？,2^(i-1)个结点 (i≥1)。
深度为k的二叉树最多有多少个结点？,2^k - 1 个结点 (k≥0)。
二叉树的叶结点数和度为2的结点数关系？,叶结点数 n0 = 度为2的结点数 n2 + 1。
具有n个结点的完全二叉树深度是多少？,floor(log2(n)) + 1。
完全二叉树中编号为i的结点，其双亲结点编号是多少？,[i/2]
完全二叉树中编号为i的结点，其左孩子结点编号是多少？,2i
完全二叉树中编号为i的结点，其右孩子结点编号是多少？,2i + 1
森林的定义是什么？,m(m>=0)棵互不相交的树的集合构成森林。
什么是树的遍历？,从根结点出发，按照某种次序依次访问树的所有结点，使每个结点仅被访问一次。
树的前序遍历顺序是什么？,1. 访问根结点 2. 按从左到右的顺序依次遍历根结点的每一棵子树。
树的后序遍历顺序是什么？,1. 按从左到右的顺序依次遍历根结点的每一棵子树 2. 访问根结点。
树的层序遍历顺序是什么？,从第一层开始，从上到下逐层遍历，同层按从左到右的顺序遍历。
树的定义是什么？,树是由 n (n ≥ 0) 个结点组成的有限集，其中 n = 0 时称为空树；n > 0 时，有且仅有一个根结点，其余结点可分为 m 个互不相交的有限集，每个集合又是一棵树，称为根的子树。
什么是结点的度？,结点拥有的子树的个数。
什么是树的度？,树内各结点的度的最大值。
什么是叶结点？,度为0的结点。
什么是分支结点？,度不为0的结点。
什么是结点的孩子？,结点的子树的根称为该结点的孩子。
什么是结点的双亲？,孩子的直接上级结点。
什么是兄弟结点？,同一双亲的孩子之间互称兄弟。
什么是结点的祖先？,从根到该结点所经分支上的所有结点。
什么是结点的子孙？,以某结点为根的子树中任一结点。
树在编译系统中的应用是什么？,表示源程序的语法结构。
树在数据库系统中的应用是什么？,组织信息，高效查找或检索。
树在计算机系统中的应用有哪些？,XML、DOM树、JSON数据、磁盘路径结构等。
树在压缩中的应用是什么？,Huffman编码。
什么是路径？,从根结点到其他结点的一条路经。
什么是路径长度？,路径经过的边的个数。
什么是结点层次？,从根开始，根为第一层，根的孩子为第二层，以此类推。
什么是树的深度？,树中结点的最大层次。
什么是有序树？,如果树中各结点的子树从左至右是有次序的（不能互换），则称为有序树。
什么是无序树？,树中各结点的子树没有次序。
什么是同构？,两棵树同构就是这两棵树的形状相同。
二叉树的定义是什么？,n (n >= 0) 个结点的有限集合，该集合或者为空集，或者由一个根结点和两棵互不相交的左右子树组成。
二叉树的特点是什么？,每个结点最多只有两个子树，且左右子树次序不能颠倒。
树和二叉树的区别是什么？,同一棵树可以有不同的二叉树形态。
二叉树有哪五种形态？,左斜树、右斜树、满二叉树、完全二叉树、普通二叉树。
什么是左斜树？,所有结点都只有左子树的二叉树。
什么是右斜树？,所有结点都只有右子树的二叉树。
什么是满二叉树？,所有的分支结点都存在左子树和右子树，且所有叶子都在同一层上。
递归终止的条件是什么？,栈空。
递归函数的定义是什么？,递归函数是直接或间接调用自己的函数。
递归函数的主要两部分是什么？,不断变化的参数和递归终止条件。
阶乘的定义式用递归描述是什么？,f(n) = n!，已知f(0) = 1，当n > 0时，f(n) = n * f(n-1)。
队列操作的第一种方法的问题是什么？,导致元素大量移动。
队列操作的第二种方法的问题是什么？,入队和出队在表的不同位置，导致“假溢出”。
循环队列中队头和队尾如何表示？,front表示队头的前一个位置，rear表示队尾。
循环队列中如何判断队空？,f = r
循环队列中如何判断队满？,f = (r+1) % MAXSIZE
循环队列入队操作是什么？,r = (r+1) % QueueSize
循环队列出队操作是什么？,f = (f+1) % QueueSize
循环队列的入队操作步骤是什么？,r = (r+1) % QueueSize
循环队列的出队操作步骤是什么？,f = (f+1) % QueueSize
顺序栈入栈的注意事项是什么？,"在入栈前检查栈满情况,将元素x同时压入栈1和栈2的栈顶。"
链栈的定义是什么？,链栈是栈的链式结构，栈顶设在单链表的头部。
链栈出栈时的注意事项是什么？,在出栈前检查栈顶指针是否为空
设计一个顺序存储结构的栈的要求是什么？,能够存储任意类型的数据，满足后进先出（LIFO）的规律。
设计一个链式存储结构的栈的要求是什么？,存储结构无多余的空间，入栈/出栈操作简单（时间）。
函数调用的基本步骤有哪些？,保存现场，调用函数，执行函数，返回并恢复现场。
顺序栈的本质是什么？,顺序表的简化，数组的一端表示栈顶，另一端表示栈底。
顺序栈中栈顶和栈底通常如何表示？,栈底为下标为0的一端，栈顶用top指针表示，空栈时top=-1。
顺序栈的入栈操作是什么？,Data[++top] = x
顺序栈的出栈操作是什么？,x = Data[top--]
顺序栈上溢和下溢是什么？,上溢：栈满时入栈，下溢：栈空时出栈
共享栈的定义是什么？,多个栈共享同一数组空间
共享栈中栈1和栈2的栈顶如何表示？,top1表示栈1的栈顶，top2表示栈2的栈顶
什么是模式匹配？,在主串S中寻找子串T的过程称为模式匹配。
在模式匹配中，T称为什么？,模式串
匹配成功时返回什么？,返回T在S中的位置
匹配失败时返回什么？,返回0
朴素的模式匹配算法的时间复杂度是多少？,O(n*m)
朴素的模式匹配算法的主要步骤有哪些？,继续比较后继字符、指针后退重新开始匹配、输出匹配结果
朴素的模式匹配算法中，当S[i] == T[j]时，i和j的操作是什么？,i++；j++
朴素的模式匹配算法中，当S[i] != T[j]时，i和j的操作是什么？,i = i - j + 1；j = 0
KMP算法的主要特点是什么？,不回溯算法，在O(n)条件下解决模式匹配问题
多维数组在图像处理中有什么应用？,亮度递增效果、对比度递增效果、灰度图和彩色图、4邻域平滑、8邻域平滑
多维数组的特点有哪些？,具有固定格式和数量、通常只有存取和修改两种操作
多维数组采用什么存储结构？,顺序存储结构
多维数组的本质操作是什么？,寻址
多维数组通常有哪两种映射方式？,行优先存储和列优先存储
C++采用哪种存储映象方式？,按行优先
FORTRAN采用哪种存储映象方式？,按列优先
二维数组按行优先的存储地址公式是什么？,Loc(aij)= Loc(a00)+ [i*n+ j]*d
二维数组按列优先的存储地址公式是什么？,Loc(aij)= Loc(a00)+ [j*m+i]*d
三维数组按行优先的存储地址公式是什么？,Loc(aijk) = Loc(a000) +[i *n*p + j*p + k]*d
三维数组按列优先的存储地址公式是什么？,Loc(aijk) = Loc(a000) +[k*m*n + j*m + i ]*d
稀疏矩阵的定义是什么？,非零元素的个数<<矩阵中元素的总数
稀疏矩阵的压缩策略是什么？,仅存储非零元素，不存储零元素
稀疏矩阵三元组包含哪些信息？,行号、列号、值
C++中稀疏矩阵的三元组如何描述？,使用`struct element`包含`int row; int col; T item;`
转置矩阵的定义是什么？,"对于一个m*n的矩阵M，转置矩阵T为n*m，且T(i,j)=M(j，i)"
转置操作的主要步骤有哪些？,找出列号为0的三元组，行列对调；找出列号为1的三元组，行列对调；依次类推直到最后一列
朴素转置算法的时间复杂度是多少？,O(n*t)
在稀疏矩阵转置中，number[]数组存储什么信息？,每一列的元素个数
在稀疏矩阵转置中，position[]数组存储什么信息？,每一列第一个非零元素的位置
稀疏矩阵转置的改进算法中，如何初始化position[]数组？,position[0] = 0; position[i] = position[i-1]+number[i-1]
如何在C++中初始化稀疏矩阵B的行列信息？,B.m = A.n; B.n = A.m; B.t = A.t;
在稀疏矩阵转置的改进算法中，如何计算每列第一个非零元素的位置？,遍历number[]数组累加前一列的元素个数
十字链表表示稀疏矩阵时，row、col、item分别代表什么？,row代表行号，col代表列号，item代表值
十字链表中的down指针指向什么？,指向同列下一个非零元素
十字链表中的right指针指向什么？,指向同行下一个非零元素
在稀疏矩阵的转置改进算法中，如何交换A中的行列存储到B中？,通过遍历A，将每个元素交换行、列后存储到B中，并更新position数组
稀疏矩阵的转置改进算法的时间复杂度是多少？,O(t)
什么是串？,串是零个或多个字符组成的有限序列。
什么是子串？,子串是串中任意连续的字符组成的子序列。
子串在主串中的序号如何表示？,子串在主串中的序号是子串第一个字符在主串中的位置。
串的常见操作有哪些？,求串长(StrLength)，复制(StrAssign)，连接(StrConcat)，求子串(StrSub)，比较(StrCmp)，求子串位置(StrIndex)
串的存储结构有哪些？,顺序结构和链式结构。
串的顺序存储结构有哪些形式？,压缩形式和非压缩形式。
什么是存储密度？,数据元素所占存储位与实际分配的存储位的比值。
如何求串长？,使用StrLength函数。
如何复制串？,使用StrAssign函数。
如何比较串？,使用StrCmp函数。
如何求子串在主串的位置？,使用StrIndex函数。
循环队列的入队实现步骤是什么？,判断队列是否上溢（f == (r+1) % QueueSize），然后将r更新为(r+1) % QueueSize，并将数据x存入data[r]。
循环队列的出队实现步骤是什么？,判断队列是否下溢（r == f），然后将f更新为(f+1) % QueueSize，并返回data[f]。
如何求循环队列的长度？,使用公式(r - f + QueueSize) % QueueSize计算。
链队列的队头和队尾如何表示？,头结点用来出队删除，尾指针用来入队插入。
链队列的入队实现步骤是什么？,创建新节点s，s->data = x，s->next = NULL，rear->next = s，rear = s。
链队列的出队实现步骤是什么？,Node<T> *p = front->next，front->next = p->next，delete p。
链队列出队的特殊情况是什么？,如果front->next == NULL，则将rear指向front。
链队列的析构函数如何实现？,使用while循环删除每个节点，直到front为NULL。
